import matplotlib.pyplot as plt

# Constants
d_max = 20  # Desired safe distance (meters)
kp = 50  # Proportional gain
ki = 0.1  # Integral gain
kd = 10  # Derivative gain
b = 0.5  # Drag coefficient
m = 1000  # Vehicle mass (kg)

# Initial conditions
vel = 5  # Initial velocity of the follower (m/s)
s = 50  # Initial distance between the vehicles (meters)
e = s - d_max  # Initial error
i = 0  # Integral term
e_prev = e  # Previous error for derivative calculation

# Time simulation parameters
dt = 0.1  # Time step (seconds)
time_steps = 300  # Number of simulation steps

# Data storage
time_arr = []
distance_arr = []
velocity_arr = []
error_arr = []

# Simulation loop
for t in range(time_steps):
    # Calculate control action using PID
    i += e * dt  # Integral term
    d = (e - e_prev) / dt  # Derivative term
    u = kp * e + ki * i + kd * d  # Control signal

    # Update acceleration, velocity, and distance
    a = (u - b * vel) / m
    vel += a * dt
    s -= vel * dt  # Update the distance (distance = s - velocity * time)

    # Update error
    e_prev = e
    e = s - d_max

    # Stop simulation if error becomes too large or vehicle crashes
    if abs(e) > 100 or s < 0:
        print("Simulation stopped: Error or distance out of range.")
        break

    # Store values for plotting
    time_arr.append(t * dt)
    distance_arr.append(s)
    velocity_arr.append(vel)
    error_arr.append(e)

# Plot Distance vs Time
plt.figure(figsize=(8, 5))
plt.plot(time_arr, distance_arr, label="Distance (m)", color="blue", linewidth=2)
plt.axhline(y=d_max, color='orange', linestyle='--', label="Safe Distance")
plt.title("Distance vs Time", fontsize=14)
plt.xlabel("Time (s)", fontsize=12)
plt.ylabel("Distance (m)", fontsize=12)
plt.legend()
plt.grid()
plt.show()

# Plot Velocity vs Time
plt.figure(figsize=(8, 5))
plt.plot(time_arr, velocity_arr, label="Velocity (m/s)", color="green", linewidth=2)
plt.title("Velocity vs Time", fontsize=14)
plt.xlabel("Time (s)", fontsize=12)
plt.ylabel("Velocity (m/s)", fontsize=12)
plt.legend()
plt.grid()
plt.show()

# Plot Error vs Time
plt.figure(figsize=(8, 5))
plt.plot(time_arr, error_arr, label="Error (m)", color="red", linewidth=2)
plt.title("Error vs Time", fontsize=14)
plt.xlabel("Time (s)", fontsize=12)
plt.ylabel("Error (m)", fontsize=12)
plt.legend()
plt.grid()
plt.show()